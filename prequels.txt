This project is a backend application, which is totally user based. Using this application user can search a product, see a product. Users can signup and login, authentication is managed using JWT Authentication. After that , users can add their products in cart, list their cart, can perform removal of the same. Along with this they can store their address, edit it time to time, and can remove it when needed to.
For payment their is checkout where all the details will be validated and this will be followed by a checkout.

In this project, I have used some famous packages that are available around the GOlang, namely Gin, for connection, MongoDB for database. And in this project the MongoDB will be running under the docker enviroment.

The folder have been structured into categories like:
1) Controllers, which is responsible for controlling all the ongoing operation, or has the set of instructions that the APIs will be following

2) Database: This folder has everything related to the databases, from the connection to the creation of instances

3) Models: We have the structure for every entity that we will be using inside this project, like Users, Orders, Payment, Addresses etc

4) Routes: In this folder we would be assigining the routes or we would be exposing the endpoint through which we would be communication will be done

5) Tokens: In this one, we would be primarly working with Authentication, from the User Signup, Login and creation of Token etc.

API FUNCTIONING OVER THE APPLICATION:

1) SIGNUP (POST): 
	http://localhost:5000/users/signup

2) LOGIN (POST):
	 http://localhost:5000/users/login

3) ADMIN ADD PRODUCT FUNCTION (POST):	
	http://localhost:5000/admin/addproduct

4) VIEW ALL PRODUCTS (GET):
	http://localhost:5000/users/productview

5) SEARCH PRODUCT BY REGEX FUNCTION (GET):
	http://localhost:5000/users/search?name=

<----------------------------------------------->

6) ADDING THE PRODUCT TO THE CART (GET):
	http://localhost:5000/addtocart?id=product_id&userID=user_ID

7) REMOVING ITEM FROM THE CART (GET): 
	http://localhost:5000/removecart?id=xxprodIdxx&userID=userID

8) LISTING THE ITEMS IN THE USER CART AND TOTAL PRICE (GET):
	http://localhost:5000/listcart?id=xxxxuser_idxxxx

9) ADDING THE ADDRESS (POST):
	http://localhost:5000/addaddress?id=user_id
	ONLY TWO ADDRESS ALLOWED (HOME AND WORK)

10) EDITING HOME ADDRESS (PUT):
	http://localhost:5000/edithomeaddress?id=xxxuser_idxxx

11) EDIT WORK ADDRESS (PUT):
	http://localhost:5000/editworkaddress?id=xxxuser_idxxx

12) DELETE ADDRESS (GET):
	http://localhost:5000/deleteaddress?id=xxxuser_idxxx

13) CART CHECKOUT AND PLACING THE ORDER (GET):
	http://localhost:5000/cartcheckout?id=xxuser_idxx

14) INSTANT BUYING THE PRODUCT (GET): 
	http://localhost:5000/instantbuy?userid=xxuseridxx&pid=xxprodIDxx